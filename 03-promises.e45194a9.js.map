{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SACdD,SAASC,cAAc,uBACxBD,SAASC,cAAc,sBAC1BD,SAASC,cAAc,wBA8B3C,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAS,C,SAACH,E,MAAUC,IAEpBG,EAAQ,C,SAACJ,E,MAAUC,GAAO,GAE3BA,EAAM,G,CAIbL,EAAOa,iBAAiB,UAzCAC,IACtBA,EAAMC,iBAEN,MACEC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cAGJC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAYH,OAAOH,EAAOI,OAEhC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EAAG,CAItCvB,EAAcuB,EAHKL,EAAaK,EAAIF,GAIjCG,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACrBuB,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,OAC5D0B,QAAMC,IAAI,uBAAqB5B,QAAiBC,MAAU,IAEzD4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MACtBuB,EAAA9B,GAAS+B,OAAOK,QAAQ,sBAAoB9B,QAAiBC,OAC3D0B,QAAMC,IAAI,sBAAoB5B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst inputFirstDelay = document.querySelector('input[name=\"delay\"]');\nconst inputDelayStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\n\nconst onFormElSubmit = (event) => {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n  // console.log(Number(amount.value));\n\n  const firstDelay = Number(delay.value);\n  const delayStep = Number(step.value);\n  const amountVal = Number(amount.value);\n\n  for (let i = 1; i <= amountVal; i += 1) {\n    let delayPromise = firstDelay + i * delayStep;\n    // console.log(delayPromise);\n\n    createPromise(i, delayPromise)\n      .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n      .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve ({position, delay})\n      } else {\n        reject ({position, delay})\n  }\n    }, delay)\n  }) \n}\n\nformEl.addEventListener(\"submit\", onFormElSubmit);\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","elements","delay1","step","amount","currentTarget","firstDelay","Number","value","delayStep","amountVal","i","then","$parcel$interopDefault","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.e45194a9.js.map"}